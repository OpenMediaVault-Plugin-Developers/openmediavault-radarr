#! /bin/sh
### BEGIN INIT INFO
# Provides: Radarr
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Should-Start: $NetworkManager
# Should-Stop: $NetworkManager
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: starts instance of Radarr
# Description: starts instance of Radarr using start-stop-daemon
### END INIT INFO

############### EDIT ME ##################
# path to app
APP_PATH=/opt/Radarr

# user
RUN_AS=radarr

# path to mono bin
DAEMON=/usr/bin/mono

# Path to store PID file
PID_FILE=/var/run/radarr/radarr.pid
PID_PATH=$(dirname $PID_FILE)

# script name
NAME=radarr

# app name
DESC=Radarr

# startup args
EXENAME="Radarr.exe"
Radarr_PID=`ps auxf | grep Radarr.exe | grep -v grep | awk '{print $2}'`

DAEMON_OPTS=" "$EXENAME

############### END EDIT ME ##################



test -x $DAEMON || exit 0

set -e

#Look for PID and create if doesn't exist
if [ ! -d "$PID_PATH" ]; then
    mkdir -p $PID_PATH
    chown $RUN_AS $PID_PATH
fi

if [ -e "$PID_FILE" ]; then
    PID=`cat $PID_FILE`
    if ! kill -0 $PID > /dev/null 2>&1; then
        rm $PID_FILE
    fi
fi

echo $Radarr_PID > $PID_FILE

case "$1" in
    start)
        if [ -z "${Radarr_PID}" ]; then
            echo "Starting $DESC"
            rm -rf $PID_PATH || return 1
            install -d --mode=0755 -o $RUN_AS $PID_PATH || return 1
            start-stop-daemon -d $APP_PATH -c $RUN_AS --start --background --pidfile $PID_FILE --exec $DAEMON -- $DAEMON_OPTS
        else
            echo "Radarr already running."
        fi
    ;;
    stop)
        echo "Stopping $DESC"
        if [ ! -z "${Radarr_PID}" ]; then
            start-stop-daemon --stop --pidfile $PID_FILE --retry 15
        fi
    ;;
    restart|force-reload)
        echo "Restarting $DESC"
        if [ ! -z "${Radarr_PID}" ]; then
            start-stop-daemon --stop --pidfile $PID_FILE --retry 15
        fi
        start-stop-daemon -d $APP_PATH -c $RUN_AS --start --background --pidfile $PID_FILE --exec $DAEMON -- $DAEMON_OPTS
    ;;
    status)
        # Use LSB function library if it exists
        if [ -f /lib/lsb/init-functions ]; then
            . /lib/lsb/init-functions
                if [ -e $PID_FILE ]; then
                    status_of_proc -p $PID_FILE "$DAEMON" "$NAME" && exit 0 || exit $?
                else
                    log_daemon_msg "$NAME is not running"
                    exit 3
                fi
        else
            # Use basic functions
            if [ -e $PID_FILE ]; then
                PID=`cat $PID_FILE`
                if kill -0 $PID > /dev/null 2>&1; then
                    echo " * $NAME is running"
                    exit 0
                fi
            else
                echo " * $NAME is not running"
                exit 3
            fi
        fi
    ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
        exit 1
    ;;
esac

exit 0